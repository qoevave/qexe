"use strict";(self.webpackChunkqexe_website=self.webpackChunkqexe_website||[]).push([[8150],{6665:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>p,frontMatter:()=>n,metadata:()=>c,toc:()=>d});var a=i(4848),r=i(8453),o=i(6025),s=i(1122);const n={sidebar_position:1,custom_edit_url:null},l="Overview",c={id:"qexe-architecture/overview",title:"Overview",description:"Ease-of-Use vs. Flexability",source:"@site/docs/qexe-architecture/overview.mdx",sourceDirName:"qexe-architecture",slug:"/qexe-architecture/overview",permalink:"/qexe/docs/qexe-architecture/overview",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Terminology and Concepts",permalink:"/qexe/docs/terminology"},next:{title:"Max/MSP Controller",permalink:"/qexe/docs/qexe-architecture/maxmsp-host"}},h={},d=[{value:"Ease-of-Use vs. Flexability",id:"ease-of-use-vs-flexability",level:2},{value:"QExE Architecture",id:"qexe-architecture",level:2},{value:"Pick and choose: Test control, VR platform, or both?",id:"pick-and-choose-test-control-vr-platform-or-both",level:4},{value:"Why MaxMSP and Unity?",id:"why-maxmsp-and-unity",level:2},{value:"Max/MSP",id:"maxmsp",level:3},{value:"Some things, are easier coded than drawn...",id:"some-things-are-easier-coded-than-drawn",level:4},{value:"Unity",id:"unity",level:3}];function u(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(t.h2,{id:"ease-of-use-vs-flexability",children:"Ease-of-Use vs. Flexability"}),"\n",(0,a.jsx)(t.p,{children:"Many labs require different design setups, and it's a tall order to cater to all situations."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"For power users, experienced Unity developers, or researchers with subjective test design, a range of flexible features would provide a more comprehensive tool."}),"\n",(0,a.jsx)(t.li,{children:"For novice users, a rich and flexible feature set requires a steep learning curve, somewhat defeating the purpose of providing a tool to streamline virtual reality reality tests."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"ease vs flexibility",src:i(1173).A+"",width:"911",height:"351"})}),"\n",(0,a.jsx)(t.h2,{id:"qexe-architecture",children:"QExE Architecture"}),"\n",(0,a.jsx)(t.p,{children:"To overcome this issue, the QExE tool takes a modular design approach. Using a set a defined interfaces for methods, questionnaires, and OSC communication, different modules can be programmed and imported by experts users to work within the tool, while leaving the base QExE feature set clutter-free for normal users wishing to explore the current implementation."}),"\n",(0,a.jsx)(t.h4,{id:"pick-and-choose-test-control-vr-platform-or-both",children:"Pick and choose: Test control, VR platform, or both?"}),"\n",(0,a.jsx)(t.p,{children:'Using a Controller-Agent-based setup, we can separate out "test control" aspects from "virtual platform" aspects.'}),"\n",(0,a.jsx)(t.p,{children:"For example, if you have a VR system that already has UI's and interaction mechanics but require a means to automate and collect data, you can use the Controller. Likewise, the reverse if true if your lab uses Matlab or Python to automate tests but require a VR system with user interfaces for subjects, you can just take the Unity Agent. In these examples, the only additional programming required is to implement the expected communication messages between programs."}),"\n",(0,a.jsxs)(t.p,{children:["Here's quick glance at the overall architecture of the QExE tool. Check out the ",(0,a.jsx)(t.a,{href:"./maxmsp-host",children:(0,a.jsx)(t.strong,{children:"MaxMSP Controller"})})," and ",(0,a.jsx)(t.a,{href:"./unity-client",children:(0,a.jsx)(t.strong,{children:"Unity Agent"})})," pages for a more detailed breakdown of what's happening inside."]}),"\n",(0,a.jsx)(s.A,{alt:"Docusaurus themed image",sources:{light:(0,o.A)("/img/QExE_Overview_light.png"),dark:(0,o.A)("/img/QExE_Overview_dark.png")}}),"\n",(0,a.jsx)(t.h2,{id:"why-maxmsp-and-unity",children:"Why MaxMSP and Unity?"}),"\n",(0,a.jsx)(t.p,{children:"There several tools that could have been used to develop either the Controller or Agent. Front runners for the QExE Host could have been JUCE, for example. For the Client, Unreal Engine would have been an option. In the end, it all comes back to which program best fits your use-case."}),"\n",(0,a.jsx)(t.h3,{id:"maxmsp",children:"Max/MSP"}),"\n",(0,a.jsx)(t.p,{children:'MaxMSP is a graphical programming tool. It\'s basic principle of having graphical objects that represent a class means that those will minimal coding experience can jump in to create something with little trouble. This graphical programming is done in something called a "patch". A patch can be as big or small as you like, contain graphic components for designing quick user interfaces, and contain javascript code. While this does have drawbacks for those with a deeper coding background, those who have little coding experience that wish to adapt the QExE tool have a much higher chance of success, than if they were to open up some source code to a C++ project.'}),"\n",(0,a.jsx)(t.h4,{id:"some-things-are-easier-coded-than-drawn",children:"Some things, are easier coded than drawn..."}),"\n",(0,a.jsxs)(t.p,{children:["If we want to get more organized, we can create a Javascript object in MaxMSP and script out some functions. Going deeper into some DSP we can also open up a GEN object. Read more about that ",(0,a.jsx)(t.a,{href:"https://docs.cycling74.com/max8/vignettes/gen_overview",children:"here"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"Most of the QExE Host is programmed done using a combination of patchers with corresponding javascript code objects."}),"\n",(0,a.jsx)(t.h3,{id:"unity",children:"Unity"}),"\n",(0,a.jsx)(t.p,{children:"Unity is a 3D gaming engine that has risen to popularity within research communities due to it's accessibility. The program has a shallow learning curve, is capable of doing many of the tasks that are throw it's way, has good online documentation, and allows users to get into lower level C# coding quite easily with it's scripting API built around a base class - MonoBehavior."}),"\n",(0,a.jsx)(t.p,{children:"More recently, Unity has invested resources into providing tools for virtual reality development, making it a good candiate for the QExE tool."})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},1173:(e,t,i)=>{i.d(t,{A:()=>a});const a=i.p+"assets/images/ease-flexibility-9074b40832ea673c7fed3d38e7405a00.png"}}]);